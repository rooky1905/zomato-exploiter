from django.shortcuts import render
from bs4 import BeautifulSoup
import requests
import operator
from itertools import islice

def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))


def result(request):
    rest_score = {}
    rest_id ={}
    # link = request.GET.get('zomatolink')
    if request.GET.get('zomatolink'):
        zomato_url = request.GET.get('zomatolink')
        headers = dict()
        headers['User-Agent']= 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0'
        source = requests.get(zomato_url, headers=headers)
        r = BeautifulSoup(source.text, 'html.parser')
        divs = r.find_all('div', class_ = 'search-o2-card')
        # total_page = r.find('div', class_ = 'col-l-4 mtop pagination-number').text
        total_page = int(request.GET.get('pages'))
        # total_page = int(total_page[10:])

        for div in divs:
            res_name = div.find('a', class_ = 'result-order-flow-title').text.strip()
            res_id = div.get("data-res_id")
            res_rating = div.findChildren("div",{'class':'rating-popup','data-res-id':res_id})[0].text.strip()
            res_min = str(div.findChildren("div",{'class':'nowrap'})[1].encode("utf-8"))
            res_min = float(res_min[54:57])
            if res_rating == '-':
                res_rating = 2.5
         
            elif res_rating == 'NEW':
                res_rating = 3.0

            res_rating = float(res_rating)
            # print(res_name, res_id, res_rating, res_min)
            score = int(round((res_rating * 40 - res_min/4)/10,2)*2)
            rest_score.update({res_name:score})
            rest_id.update({res_id:score})

        for page in range (2, total_page+1):
            zomato_url = request.GET.get('zomatolink')+'&page={}'.format(page)
            source = requests.get(zomato_url, headers=headers)
            r = BeautifulSoup(source.text, 'html.parser')
            divs = r.find_all('div', class_ = 'search-o2-card')
            if divs:
                total_page = r.find('div', class_ = 'col-l-4 mtop pagination-number').text
                total_page = int(total_page[10:])
            
                for div in divs:
                    res_name = div.find('a', class_ = 'result-order-flow-title').text.strip()
                    res_id = div.get("data-res_id")
                    res_rating = div.findChildren("div",{'class':'rating-popup','data-res-id':res_id})[0].text.strip()
                    res_min = str(div.findChildren("div",{'class':'nowrap'})[1].encode("utf-8"))
                    res_min = float(res_min[54:57])
                    if res_rating == '-':
                        res_rating = 2.5
                    
                    elif res_rating == 'NEW':
                        res_rating = 3.0

                    res_rating = float(res_rating)
                    # print(res_name, res_id, res_rating, res_min)
                    score = int(round((res_rating * 40 - res_min/4)/10,2)*2)
                    rest_score.update({res_name:score})
                    rest_id.update({res_id:score})
                
    rest_score= dict(sorted(rest_score.items(), key=operator.itemgetter(1),reverse=True))
    rest_score = take(20, rest_score.items())
    final_score = []
    final_id = []
  
        
    rest_id= dict(sorted(rest_id.items(), key=operator.itemgetter(1),reverse=True))
    rest_id = take(20, rest_id.items())
    i=0
    for item in rest_score:
        final_score.append([item[0],item[1]])

    for item in rest_id:
        final_id.append([item[0],item[1]])
 
    for j in final_id:
        final_score[i].append(j[0])
        i+=1

    return render(request, 'results.html', {'final_score':final_score})

def home(request):
    return render(request, 'home.html')